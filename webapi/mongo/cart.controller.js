const cartyModel = require('./cart.model')
const productModel = require("../mongo/product.model");

module.exports = { getAllCart, addProductToCart,deleteCartt }

async function getAllCart() {
    try {
        const result = await cartyModel.find()
        return result;
    } catch (error) {
        console.log(error);
        throw new Error("L·ªói l·∫•y d·ªØ li·ªáu");
    }

}
//th√™m s·∫£n ph·∫©m v√†o cart

async function addProductToCart(data) {
    try {
        const {  ten, gia, gia_km, soluong, size, hinh, userID,productID } = data;

        // Ki·ªÉm tra n·∫øu thi·∫øu userId
        if (!userID) {
            throw new Error("Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng!");
        }
        if(!productID){
            throw new Error("Thi·∫øu th√¥ng tin s·∫£n ph·∫©m");
        }
        // Ki·ªÉm tra gi·ªè h√†ng c·ªßa user c√≥ s·∫£n ph·∫©m ƒë√≥ ch∆∞a
        let cartItem = await cartyModel.findOne({ productID, size, userID });

        if (cartItem) {
            // N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè, ch·ªâ c·∫ßn tƒÉng s·ªë l∆∞·ª£ng
            cartItem.soluong += parseInt(soluong);
        } else {
            // N·∫øu ch∆∞a c√≥, th√™m m·ªõi s·∫£n ph·∫©m v√†o gi·ªè h√†ng
            cartItem = new cartyModel({ productID, ten, gia, gia_km, soluong, size, userID, hinh });
        }
        const saveCart = await cartItem.save();
        console.log("‚úÖ Gi·ªè h√†ng ƒë√£ l∆∞u th√†nh c√¥ng:", saveCart);

        return saveCart;
       
    } catch (error) {
        console.error("üî• L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng:", error);
        throw new Error(error.message);
    }
}

//x√≥a gi·ªè h√†ng
async function deleteCartt(id) {
    try {
        const cartDelete = await cartyModel.findByIdAndDelete(id);
        if (!cartDelete) {
            throw new Error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c·∫ßn x√≥a");
        }

        return cartDelete;
    } catch (error) {
        console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error.message);
        throw new Error(error.message);
    }
}

